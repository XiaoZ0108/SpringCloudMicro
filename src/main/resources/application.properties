spring.application.name=API_Gateway
server.port=8888

#spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8181/realms/MySpring-micro-security-realms

#spring.cloud.gateway.routes[0].id=PRODUCT-SERVICE
#spring.cloud.gateway.routes[0].uri=lb://PRODUCT-SERVICE
#spring.cloud.gateway.routes[0].predicates[0]=Path=/api/product/**

#resilience4j.circuitbreaker.configs.default

springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/api-docs

springdoc.swagger-ui.urls[0].name=ProductService
springdoc.swagger-ui.urls[0].url=/aggregate/product-service/v1/api-docs
springdoc.swagger-ui.urls[1].name=OrderService
springdoc.swagger-ui.urls[1].url=/aggregate/order-service/v1/api-docs

#Actuator
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

#Resilinece4j

#Registers a health indicator with the application?s health monitoring endpoint
resilience4j.circuitbreaker.configs.default.registerHealthIndicator=true
#circuit breaker evaluates failures based on a fixed number of calls
resilience4j.circuitbreaker.configs.default.slidingWindowType=COUNT_BASED
#circuit breaker will consider the success or failure of the last 10 calls to determine if it should open
resilience4j.circuitbreaker.configs.default.slidingWindowSize=10
#If 50% or more of the calls in the sliding window fail, the circuit breaker will open
resilience4j.circuitbreaker.configs.default.failureRateThreshold=50
#When the circuit breaker opens, it will remain in this open state for 5 seconds before transitioning to the half-open state,
# where it allows a limited number of test calls to check if the service has recovered.
resilience4j.circuitbreaker.configs.default.waitDurationInOpenState=5s
# allows 3 calls through to the service. If these calls succeed, the circuit breaker will close (resume normal operation)
resilience4j.circuitbreaker.configs.default.permittedNumberOfCallsInHalfOpenState=3
#When the wait duration in the open state elapses, the circuit breaker will automatically transition to half-open,
# allowing test calls to determine if the service has recovered.
resilience4j.circuitbreaker.configs.default.automaticTransitionFromOpenToHalfOpenEnabled=true

#circuit breaker will only start evaluating the failure rate once at least 5 calls have been made, providing enough data to make a decision
resilience4j.circuitbreaker.configs.default.minimum-number-of-calls=5

#If a call to the service takes longer than 3 seconds, the time limiter will terminate the call and consider it a failure.
resilience4j.timelimiter.configs.default.timeout-duration=3s

#If a call to the service fails, the retry mechanism will try up to 3 times before giving up.
resilience4j.retry.configs.default.max-attempts=3
#After a failed attempt, the retry mechanism will wait for 2 seconds before making another attempt.
resilience4j.retry.configs.default.wait-duration=2s

